How to install Apache-2 and wsm2 on Debian Squeeze, Wheezy or Jessie (draft)
----------------------------------------------------------------------------
part of website-manager-2 package. [Sorry about my terrible English...]

Hungarian Wiki page: http://admin.wiki.kzoli.hu/

1. Preconditions

This how-to applied to a machine without(!) Apache previously installed.

Web storage (/var/www by default) must be placed in Posix-ACL supported filesystem (ext3/ext4 tested).

2. Create a dedicated Linux (system) user to run web administration service (https DAV).

-- shell code follows, execute as root --

# create user
useradd -c Webadministrator -g www-data -d /home/webadmin -m -s /bin/bash webadmin # main group is www-data!
chmod 750 /home/webadmin
passwd webadmin # set a strong pass, eg. generated by /usr/bin/pwgen -s -n -c 12 1

# setup and secure public key authentication
export user='webadmin' group='www-data'
mkdir -m 500 /home/$user/.ssh
chown $user:$group /home/$user/.ssh
touch /home/$user/.ssh/authorized_keys2
chown $user:$group /home/$user/.ssh/authorized_keys2
chmod 400 /home/$user/.ssh/authorized_keys2
chattr +i /home/$user/.ssh/authorized_keys2

# secure user's settings
chmod 440 /home/webadmin/.bashrc; chattr +i /home/webadmin/.bashrc
chmod 440 /home/webadmin/.profile; chattr +i /home/webadmin/.profile
chmod 440 /home/webadmin/.bash_logout; chattr +i /home/webadmin/.bash_logout

-- end of code --

Make sure, that PAM (or equivalent settings) restricts UMASK of this user to 027.

3. Install Apache-2 MPM-ITK flavour and necessary add-ons via apt

3.1 With Debian Squeeze or Wheezy (Apache 2.2.x):

-- shell code follows, execute as root --

apt-get install apache2-mpm-itk
#	and dependencies: apache2-utils apache2.2-common, openssl, libraries
apt-get install libapache-mod-security libcrypt-ssleay-perl libgnupg-perl
#	and dependencies: mod-security-common sgml-base libxml2 xml-core etc.
# Next line for Squeeze only: libraries for old-style ModSecurity updater.
apt-get install libwww-perl
#       and many dependent libraries.
apt-get install geoip-bin libapache2-mod-geoip libgeoip1
apt-get install awstats libgeo-ipfree-perl libnet-dns-perl libnet-ip-perl libnet-xwhois-perl liburi-perl

# Test unconfigured Apache via web browser, then stop them:
/etc/init.d/apache2 stop

-- end of code --

3.2 With Debian Jessie (Apache 2.4.x):

-- shell code follows, execute as root --

apt-get install apache2-mpm-itk           # apache2 + libapache2-mpm-itk, openssl, ssl-cert, libraries
apt-get install libapache2-mod-security2  # +: modsecurity-crs, ca-certificates, libraries
apt-get install libwww-perl               # +: many Perl (needs for Munin monitoring also)..
apt-get install libapache2-mod-geoip geoip-bin
apt-get install awstats libgeo-ipfree-perl libnet-dns-perl libnet-xwhois-perl

# Test unconfigured Apache via web browser, then stop them:
systemctl stop apache2

-- end of code --

3.3 AwStats settings

Switch off AwStats' refresh:

-- shell code follows, execute as root --

mount -o remount,rw /usr  # maybe mounted as R/O but is necessary to write now
chmod 740 /usr/lib/cgi-bin/awstats.pl

-- end of code --

Comment out all AwStats' crons in /etc/cron.d/awstats.

3.4 ModSecurity hacks

Debian Squeeze with ModSecurity 2.5 only: patch a bogous ModSecurity rule 
in /usr/share/doc/mod-security-common/examples/rules/base_rules/modsecurity_crs_50_outbound.conf 
according to https://www.modsecurity.org/tracker/browse/CORERULES-36
Insert 'pass,' after 'nolog,' into this (near 84) line:

SecRule RESPONSE_BODY "!@pmFromFile modsecurity_50_outbound.data" \
        "phase:4,rev:'2.0.5',t:none,capture,t:urlDecodeUni,t:htmlEntityDecode,nolog,pass,skipAfter:END_OUTBOUD_CHECK"

Debian Squeeze with ModSecurity 2.5 or Debian Wheezy:
DIRTY HACK - remove libgnupg-perl because ruleset updater isn't working with
untrusted repository, but lack of Perl GnuPG library will skip checking (sorry).

4. Extract wsm2 from archive (keep the directory structure! - /usr maybe mounted as R/O, but is necessary to write now).

5. Read /etc/default/wsm2 file, make corrections if necessary (maybe isn't).

6. Start wsm2 automatic configuration function

-- shell code follows, execute as root --

wsm2 --configure

-- end of code --

This function makes a default virtualhost named machine's fully qualified hostname with wsm2 policy. See /var/log/wsm2.log for details. Note 'webmaster' (DAV) and 'auditor' (AwStats) Apache virtualhost user's credentials.

7. Go/NoGo tests

7.1 Get default webpage via http://IP.IP.IP.IP/ and https://IP.IP.IP.IP/ also - check the self-signed certificate.

7.2 Simulate an "attack" to check ModSecurity functionality:

-- shell code follows, execute as root --

wget -S --spider --user-agent='dummyagent' localhost # Normal request
wget -S --spider --user-agent='webinspect' localhost # Simulated attack

-- end of code --

Second request generates a 403, 404 or 500 error page when ModSecurity is working. See /var/log/apache2/[hostname]-error.log and /var/log/apache2/ALLHOSTS-modsec-audit.log files!

7.3 Check Apache logs via web using http://IP.IP.IP.IP/log (automatically switches to https) and webmaster's credentials!

7.4 Check urlcheck service

-- shell code follows, execute as root --

urlcheck_scanhosts

# Expected response (maybe two identic lines due a bug before wsm2 v2.3): 
# request_time response_time URL status_code
# YYYY:MM:DD:hh:mm:ss YYYY:MM:DD:hh:mm:ss FULLY.QUALIFIED.HOSTNAME 200 OK
# YYYY:MM:DD:hh:mm:ss YYYY:MM:DD:hh:mm:ss FULLY.QUALIFIED.HOSTNAME 200 OK

-- end of code --

This service runs halfhourly, results are logged at /var/log/apache2/ALLHOSTS-urlcheck.log and /var/log/apache2/[hostname]-urlcheck.log and root will be notified on any failure by email.

7.5 Check https DAV access of webmaster

Open https://IP.IP.IP.IP/ with an appropriate DAV client, authenticate as 'webmaster' and upload some web content then check it via browser unauthenticated.

7.6 Refresh GeoIP databases from web

-- shell code follows, execute as root --

/etc/cron.weekly/geoipfree-update # maybe run for one hour on amd64 box, with wsm2 before 2.6!
/etc/cron.weekly/geolite-update

-- end of code --

On failure check URLs specified in /etc/default/wsm2-geoipfree and /etc/default/wsm2-geolite files.

7.7 Generate and check statistic pages

-- shell code follows, execute as root --

/etc/cron.daily/awstats

-- end of code --

Check statistics at http://IP.IP.IP.IP/awstats URL (automatically switches to https) with 'auditor' credentials.

8. You may regenerate the self-signed common https server-side certificate

Optional step using wsm2 2.5+ version, because the common server certificate isn't used by default - per-virtualhost certificates and SNI are set.

-- shell code follows, execute as root --

cd /root/tmp     # Or any suitable temporary folder
export DAYS=360 FQHN="FULLY.QUALIFIED.HOSTNAME" 
echo $FQHN $DAYS # Safety first :-)

openssl req -new -key $FQHN.key -out $FQHN.csr # Fill up certificate's fields by example:
#   Country Name (2 letter code) [AU]:US
#   State or Province Name (full name) [Some-State]:NY
#   Locality Name (eg, city) []:New York
#   Organization Name (eg, company) [Internet Widgits Pty Ltd]:My Company
#   Organizational Unit Name (eg, section) []:Web Services
#   Common Name (eg, YOUR name) []:FULLY.QUALIFIED.HOSTNAME
#   Email Address []:sysadmin@mydomain.com
#   Extra attributes may left blank

openssl x509 -req -days $DAYS -in $FQHN.csr -signkey $FQHN.key -out $FQHN.crt # Self sign
mv $FQHN.crt $FQHN.pem # Rename

# Stop webserver and install certificate
/etc/init.d/apache2 stop
rm  /etc/ssl/certs/$FQHN.pem; cp $FQHN.pem /etc/ssl/certs/$FQHN.pem 
rm  /etc/ssl/private/$FQHN.key; cp $FQHN.key /etc/ssl/private/$FQHN.key
# Delete temporary files
rm $FQHN.csr $FQHN.key $FQHN.pem
# Restart with new certificate
/etc/init.d/apache2 start

-- end of code --

9. Updating ModSecurity Core Rule Set (CRS) manually

The wsm2 contains a weekly cron job to update CRS, but you may find some restrictions.

* Using Debian Squeeze with ModSecurity 2.5 the last compatible ruleset 2.2.4 is archived and downloadable from http://admin.wiki.kzoli.hu/download/ - CRS 2.2.5 and above aren't compatible. Download CRS 2.2.4 manually then unpack into /etc/apache2/modsecurity/modsecurity-crs/2.2.4 folder. Ignore future notifications from /etc/cron.weekly/modsec-update - sorry.

* Using Debian Wheezy with ModSecurity 2.6.6 the last compatible ruleset is the packaged 2.2.5 version - sorry, update isn't possibile.

* Using Debian Jessie, the modsecurity-crs package is updated(?) by the security team, but you may get manually the latest OWASP CRS with modsec-update-owasp:

-- shell code follows, execute as root --

/etc/cron.weekly/modsec-update-owasp

-- end of code --

To switch to new ruleset stop webserver and symlink /etc/modsecurity/currentversion and /etc/modsecurity/rules to desired ruleset folder (/etc/modsecurity/modsecurity-crs/X.Y.Z). Then open this folder and check the existence of the rules into activated_rules folder.

Restarting webserver gets effective the new ruleset. Repeat the Go/NoGo test:

-- shell code follows, execute as root --

wget -S --spider --user-agent='dummyagent' localhost # Normal request
wget -S --spider --user-agent='webinspect' localhost # Simulated attack

-- end of code --

and check ruleset version number within virtualhost's error.log.

10. Setup web-related mail aliases: add following lines to /etc/aliases

www-data: root
webadmin: root

At this point, you have a static and PHP-preconfigured web hosting service. About PHP hosting, read the PHP.howto (TODO!).

### END OF DOCUMENT ###
