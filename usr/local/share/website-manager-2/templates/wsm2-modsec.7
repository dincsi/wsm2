# libapache-modsecurity-2 local settings - special thanks to Attila Garancsi.
# Part of website-manager-2 package.

<IfModule security2_module>
    # Log settings for concurrent method.
    SecAuditLogType Concurrent
    SecAuditLogDirMode  02770
    SecAuditLogFileMode 00640
    SecAuditEngine RelevantOnly
    SecAuditLogRelevantStatus "^(?:5)"
#   SecAuditLogRelevantStatus "^(?:5|4(?!04))"
    SecAuditLogParts ABCFHZ
    SecAuditLog         	/var/log/apache2/ALLHOSTS-audit.log
    SecAuditLogStorageDir       /var/lib/mod_security/AuditLogDir
    SecDebugLogLevel 0
    SecDebugLog         	/var/log/apache2/ALLHOSTS-modsec-debug.log

    # Temporary folder settings.
    SecDataDir /var/lib/mod_security/SecDataDir
    SecTmpDir  /var/lib/mod_security/SecTmpDir

    # Workaround for a behavior change from ModSecurity 2.5.12
    # http://sourceforge.net/mailarchive/message.php?msg_id=24512950
    SecPcreMatchLimit 8000
    SecPcreMatchLimitRecursion 8000

    # Including rule set - make modifications here if necessary.
    Include /etc/apache2/modsecurity/rules/modsecurity_crs_*.conf
    # For ModSecurity 2.5 this override must be placed here!
    SecDefaultAction "phase:2,log,deny,status:500,t:lowercase,t:replaceNulls,t:compressWhitespace"
    # Base rules for Debian Squeeze+ only.
    Include /etc/apache2/modsecurity/rules/base_rules/modsecurity_crs_*.conf
    # Optional rules for Debian Lenny and Squeeze+.
#   Include /etc/apache2/modsecurity/rules/optional_rules/*.conf
    # Optional system-wide errata rules (must be the last ruleset).
    Include /etc/apache2/modsecurity/modsecurity_crs_99_errata.wsm2
    Include /etc/apache2/modsecurity/rules/modsecurity_crs_*errata*.conf

    # Turn the filtering engine On.
    SecRuleEngine On
    #SecRuleEngine DetectionOnly
    SecRequestBodyAccess On
    SecResponseBodyAccess Off

    # Verify that we've correctly processed the request body.
    SecRule REQBODY_PROCESSOR_ERROR "!@eq 0" \
        "phase:2,t:none,log,deny,msg:'Failed to parse request body.',severity:2"

    # By default be strict with what we accept in the multipart/form-data
    # request body. If the rule below proves to be too strict for your
    # environment consider changing it to detection-only. You are encouraged
    # _not_ to remove it altogether.
    SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
        "phase:2,t:none,log,deny,msg:'Multipart request body failed strict validation: \
        PE %{REQBODY_PROCESSOR_ERROR}, \
        BQ %{MULTIPART_BOUNDARY_QUOTED}, \
        BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
        DB %{MULTIPART_DATA_BEFORE}, \
        DA %{MULTIPART_DATA_AFTER}, \
        HF %{MULTIPART_HEADER_FOLDING}, \
        LF %{MULTIPART_LF_LINE}, \
        SM %{MULTIPART_SEMICOLON_MISSING}'"

    # Did we see anything that might be a boundary?
    SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
        "phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"

    # Some internal errors will set flags in TX and we will need to look for these.
    # All of these are prefixed with "MSC_".  The following flags currently exist:
    #
    # MSC_PCRE_LIMITS_EXCEEDED: PCRE match limits were exceeded.
    #
    SecRule TX:/^MSC_/ "!@streq 0" \
            "phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"

    # Set same behavior for ModSecurity 2.0 and 2.5
    SecAction "phase:1,t:none,nolog,pass,setvar:tx.inbound_anomaly_score_level=5"
    SecAction "phase:1,t:none,nolog,pass,setvar:tx.paranoid_mode=0"

    # General modifications of above rule set.
    # Uncomment and modify to remove (switch off) some rules.
#   SecRuleRemoveByID 1 2 "9000-9010"
    # Uncomment and modify to change effects of some rules.
#   SecRuleUpdateActionById 12345 deny,status:403
    # You may define or include your own general rules below.

</IfModule>
